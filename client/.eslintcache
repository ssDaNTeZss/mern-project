[{"C:\\Users\\Not\\WebstormProjects\\mern-project\\client\\src\\index.js":"1","C:\\Users\\Not\\WebstormProjects\\mern-project\\client\\src\\App.js":"2","C:\\Users\\Not\\WebstormProjects\\mern-project\\client\\src\\reportWebVitals.js":"3","C:\\Users\\Not\\WebstormProjects\\mern-project\\client\\src\\routes.js":"4","C:\\Users\\Not\\WebstormProjects\\mern-project\\client\\src\\pages\\AuthPage.js":"5","C:\\Users\\Not\\WebstormProjects\\mern-project\\client\\src\\pages\\HomePage.js":"6","C:\\Users\\Not\\WebstormProjects\\mern-project\\client\\src\\hooks\\http.hook.js":"7","C:\\Users\\Not\\WebstormProjects\\mern-project\\client\\src\\pages\\RegPage.js":"8","C:\\Users\\Not\\WebstormProjects\\mern-project\\client\\src\\hooks\\message.hook.js":"9","C:\\Users\\Not\\WebstormProjects\\mern-project\\client\\src\\hooks\\auth.hook.js":"10","C:\\Users\\Not\\WebstormProjects\\mern-project\\client\\src\\context\\AuthContext.js":"11","C:\\Users\\Not\\WebstormProjects\\mern-project\\client\\src\\pages\\ActivatePage.js":"12","C:\\Users\\Not\\WebstormProjects\\mern-project\\client\\src\\components\\Navbar.js":"13","C:\\Users\\Not\\WebstormProjects\\mern-project\\client\\src\\pages\\PersonalDataPage.js":"14"},{"size":500,"mtime":1608129276431,"results":"15","hashOfConfig":"16"},{"size":768,"mtime":1608129347672,"results":"17","hashOfConfig":"16"},{"size":362,"mtime":499162500000,"results":"18","hashOfConfig":"16"},{"size":1140,"mtime":1608146784186,"results":"19","hashOfConfig":"16"},{"size":5304,"mtime":1608033944933,"results":"20","hashOfConfig":"16"},{"size":1092,"mtime":1608135544762,"results":"21","hashOfConfig":"16"},{"size":1128,"mtime":1607719278679,"results":"22","hashOfConfig":"16"},{"size":9424,"mtime":1607781163384,"results":"23","hashOfConfig":"16"},{"size":211,"mtime":1607717363187,"results":"24","hashOfConfig":"16"},{"size":948,"mtime":1607720577848,"results":"25","hashOfConfig":"16"},{"size":211,"mtime":1607720788220,"results":"26","hashOfConfig":"16"},{"size":3088,"mtime":1607965335236,"results":"27","hashOfConfig":"16"},{"size":1902,"mtime":1608146888041,"results":"28","hashOfConfig":"16"},{"size":10795,"mtime":1608153424428,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1w02xvi",{"filePath":"32","messages":"33","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"36"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"36"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"36"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"60","messages":"61","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\Not\\WebstormProjects\\mern-project\\client\\src\\index.js",[],"C:\\Users\\Not\\WebstormProjects\\mern-project\\client\\src\\App.js",["62"],"C:\\Users\\Not\\WebstormProjects\\mern-project\\client\\src\\reportWebVitals.js",[],["63","64"],"C:\\Users\\Not\\WebstormProjects\\mern-project\\client\\src\\routes.js",[],"C:\\Users\\Not\\WebstormProjects\\mern-project\\client\\src\\pages\\AuthPage.js",["65","66","67","68"],"import React, {useContext, useEffect, useState} from 'react';\r\nimport logo from '../images/IMG_1737.jpg'\r\nimport {Formik} from \"formik\";\r\nimport * as yup from 'yup';\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {useHttp} from \"../hooks/http.hook\";\r\nimport {useMessage} from \"../hooks/message.hook\";\r\nimport {AuthContext} from \"../context/AuthContext\";\r\n\r\nexport const AuthPage = () => {\r\n    const auth = useContext(AuthContext);\r\n    const message = useMessage();\r\n    const {loading, error, request, clearError} = useHttp();\r\n\r\n    useEffect( () => {\r\n        message(error);\r\n        clearError();\r\n    }, [error, message, clearError]);\r\n\r\n    const loginHandler = async (values) => {\r\n        try {\r\n            const data = await request(\r\n                '/api/auth/login',\r\n                'POST',\r\n                values);\r\n            auth.login(data.token, data.userId);\r\n        } catch (e) {}\r\n    };\r\n\r\n    const validationsSchema = yup.object().shape({\r\n        email: yup.string()\r\n            .email('Введите верный email')\r\n            .required('Поле необходимо заполнить'),\r\n        password: yup.string()\r\n            .typeError('Должно быть строкой')\r\n            .min(8, \"Пароль должен быть длиннее 8 символов\")\r\n            .required('Поле необходимо заполнить'),\r\n    });\r\n\r\n    return (\r\n        <div>\r\n            <Formik\r\n                initialValues={{\r\n                    password: '',\r\n                    email: ''\r\n                }}\r\n                validateOnBlur\r\n                onSubmit={values => {\r\n                    loginHandler(values);\r\n                }}\r\n                validationSchema={validationsSchema}\r\n            >\r\n                {({values, errors, touched, handleChange, handleBlur, isValid, handleSubmit, dirty}) => (\r\n                    <div className=\"row\">\r\n                        <div className=\"col s12 m6 offset-m3\">\r\n                            <div className=\"card\" style={{marginTop: 100}}>\r\n                                <div className=\"card-image\">\r\n                                    <img src={logo}/>\r\n                                    <span className=\"card-title\">\r\n                                <h3>Авторизация</h3>\r\n                            </span>\r\n                                </div>\r\n                                <div className=\"card-content\">\r\n                                    <div className=\"input-field\">\r\n                                        <input\r\n                                            type='email'\r\n                                            className='red-input'\r\n                                            name='email'\r\n                                            onChange={handleChange}\r\n                                            onBlur={handleBlur}\r\n                                            value={values.email}/>\r\n                                        <label htmlFor='email'>Email</label>\r\n                                        {touched.email && errors.email &&\r\n                                        <p className=\"red-text\">{errors.email}</p>}\r\n                                    </div>\r\n                                    <div className=\"input-field\">\r\n                                        <input\r\n                                            type='password'\r\n                                            className='red-input'\r\n                                            name='password'\r\n                                            onChange={handleChange}\r\n                                            onBlur={handleBlur}\r\n                                            value={values.password}/>\r\n                                        <label htmlFor='password'>Пароль</label>\r\n                                        {touched.password && errors.password &&\r\n                                        <p className=\"red-text\">{errors.password}</p>}\r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"card-action\">\r\n                                    <button\r\n                                        disabled={!isValid && !dirty || loading}\r\n                                        className=\"btn red\"\r\n                                        style={{marginRight: 24}}\r\n                                        onClick={handleSubmit}\r\n                                        type='submit'>\r\n                                        Войти\r\n                                    </button>\r\n                                    <button\r\n                                        className=\"btn white red-text text-accent-2 z-depth-0\">\r\n                                        <NavLink to=\"/registration\"\r\n                                                 className=\"red-text text-accent-2\">\r\n                                            Регистрация\r\n                                        </NavLink>\r\n                                    </button>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                )}\r\n            </Formik>\r\n        </div>\r\n    );\r\n};","C:\\Users\\Not\\WebstormProjects\\mern-project\\client\\src\\pages\\HomePage.js",["69"],"C:\\Users\\Not\\WebstormProjects\\mern-project\\client\\src\\hooks\\http.hook.js",[],"C:\\Users\\Not\\WebstormProjects\\mern-project\\client\\src\\pages\\RegPage.js",["70","71","72","73","74"],"import React, {useEffect, useState} from 'react';\r\nimport logo from '../images/IMG_1737.jpg'\r\nimport {Formik} from \"formik\";\r\nimport * as yup from 'yup';\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {useHttp} from \"../hooks/http.hook\";\r\nimport {useMessage} from \"../hooks/message.hook\";\r\n\r\nexport const RegPage = () => {\r\n    const message = useMessage();\r\n    const {loading, error, request, clearError} = useHttp();\r\n    const [form, setForm] = useState({\r\n        lastName: '',\r\n        firstName: '',\r\n        patronymic: '',\r\n        confirmPassword: '',\r\n        email: ''\r\n    });\r\n\r\n    useEffect( () => {\r\n        message(error);\r\n        clearError();\r\n    }, [error, message, clearError]);\r\n\r\n    const registrationHandler = async (values) => {\r\n        try {\r\n            const data = await request(\r\n                '/api/auth/register',\r\n                'POST',\r\n                values);\r\n            message(data.message);\r\n        } catch (e) {}\r\n    };\r\n\r\n    const validationsSchema = yup.object().shape({\r\n        lastName: yup.string()\r\n            .typeError('Должно быть строкой')\r\n            .required('Поле необходимо заполнить'),\r\n        firstName: yup.string()\r\n            .typeError('Должно быть строкой')\r\n            .required('Поле необходимо заполнить'),\r\n        email: yup.string()\r\n            .email('Введите верный email')\r\n            .required('Поле необходимо заполнить'),\r\n        password: yup.string()\r\n            .typeError('Должно быть строкой')\r\n            .min(8, \"Пароль должен быть длиннее 8 символов\")\r\n            .required('Поле необходимо заполнить'),\r\n        confirmPassword: yup.string()\r\n            .oneOf([yup.ref('password')], 'Пароли не совпадают')\r\n            .required('Поле необходимо заполнить')\r\n    });\r\n\r\n    return (\r\n        <div>\r\n            <Formik\r\n                initialValues={{\r\n                    lastName: '',\r\n                    firstName: '',\r\n                    patronymic: '',\r\n                    password: '',\r\n                    confirmPassword: '',\r\n                    email: ''\r\n                }}\r\n                validateOnBlur\r\n                onSubmit={values => {\r\n                    console.log(values);\r\n                    registrationHandler(values);\r\n                }}\r\n                validationSchema={validationsSchema}\r\n            >\r\n                {({values, errors, touched, handleChange, handleBlur, isValid, handleSubmit, dirty}) => (\r\n                    <div className=\"row\">\r\n                        <div className=\"col s12 m6 offset-m3\">\r\n                            <div className=\"card\" style={{marginTop: 100}}>\r\n                                <div className=\"card-image\">\r\n                                    <img src={logo}/>\r\n                                    <span className=\"card-title\">\r\n                                <h3>Регистрация</h3>\r\n                            </span>\r\n                                </div>\r\n                                <div className=\"card-content\">\r\n                                    <div className=\"input-field\">\r\n                                        <input\r\n                                            type='text'\r\n                                            className='red-input'\r\n                                            name='lastName'\r\n                                            onChange={handleChange}\r\n                                            onBlur={handleBlur}\r\n                                            value={values.name}/>\r\n                                        <label htmlFor='lastName'>Фамилия *</label>\r\n                                        {touched.lastName && errors.lastName &&\r\n                                        <p className=\"red-text\">{errors.lastName}</p>}\r\n                                    </div>\r\n                                    <div className=\"input-field\">\r\n                                        <input\r\n                                            type='text'\r\n                                            className='red-input'\r\n                                            name='firstName'\r\n                                            onChange={handleChange}\r\n                                            onBlur={handleBlur}\r\n                                            value={values.firstName}/>\r\n                                        <label htmlFor='firstName'>Имя *</label>\r\n                                        {touched.firstName && errors.firstName &&\r\n                                        <p className=\"red-text\">{errors.firstName}</p>}\r\n                                    </div>\r\n                                    <div className=\"input-field\">\r\n                                        <input\r\n                                            type='text'\r\n                                            className='red-input'\r\n                                            name='patronymic'\r\n                                            onChange={handleChange}\r\n                                            onBlur={handleBlur}\r\n                                            value={values.patronymic}/>\r\n                                        <label htmlFor='patronymic'>Отчество</label>\r\n                                        {touched.patronymic && errors.patronymic &&\r\n                                        <p className=\"red-text\">{errors.patronymic}</p>}\r\n                                    </div>\r\n                                    <div className=\"input-field\">\r\n                                        <input\r\n                                            type='email'\r\n                                            className='red-input'\r\n                                            name='email'\r\n                                            onChange={handleChange}\r\n                                            onBlur={handleBlur}\r\n                                            value={values.email}/>\r\n                                        <label htmlFor='email'>Email *</label>\r\n                                        {touched.email && errors.email &&\r\n                                        <p className=\"red-text\">{errors.email}</p>}\r\n                                    </div>\r\n                                    <div className=\"input-field\">\r\n                                        <input\r\n                                            type='password'\r\n                                            className='red-input'\r\n                                            name='password'\r\n                                            onChange={handleChange}\r\n                                            onBlur={handleBlur}\r\n                                            value={values.password}/>\r\n                                        <label htmlFor='password'>Пароль *</label>\r\n                                        {touched.password && errors.password &&\r\n                                        <p className=\"red-text\">{errors.password}</p>}\r\n                                    </div>\r\n                                    <div className=\"input-field\">\r\n                                        <input\r\n                                            type='password'\r\n                                            className='red-input'\r\n                                            name='confirmPassword'\r\n                                            onChange={handleChange}\r\n                                            onBlur={handleBlur}\r\n                                            value={values.confirmPassword}/>\r\n                                        <label htmlFor='confirmPassword'>Пароль еще раз *</label>\r\n                                        {touched.confirmPassword && errors.confirmPassword &&\r\n                                        <p className=\"red-text\">{errors.confirmPassword}</p>}\r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"card-action\">\r\n                                    <button\r\n                                        disabled={!isValid && !dirty || loading}\r\n                                        className=\"btn red\"\r\n                                        style={{marginRight: 24}}\r\n                                        onClick={handleSubmit}\r\n                                        type='submit'>\r\n                                        Зарегистрироваться\r\n                                    </button>\r\n                                    <button\r\n                                        className=\"btn white red-text text-accent-2 z-depth-0\">\r\n                                        <NavLink to=\"/\"\r\n                                                 className=\"red-text text-accent-2\">\r\n                                            Авторизация\r\n                                        </NavLink>\r\n                                    </button>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                )}\r\n            </Formik>\r\n        </div>\r\n    );\r\n};","C:\\Users\\Not\\WebstormProjects\\mern-project\\client\\src\\hooks\\message.hook.js",[],"C:\\Users\\Not\\WebstormProjects\\mern-project\\client\\src\\hooks\\auth.hook.js",[],"C:\\Users\\Not\\WebstormProjects\\mern-project\\client\\src\\context\\AuthContext.js",[],"C:\\Users\\Not\\WebstormProjects\\mern-project\\client\\src\\pages\\ActivatePage.js",["75","76","77","78","79"],"import React, {useContext, useEffect, useState} from 'react';\r\nimport logo from '../images/IMG_1737.jpg'\r\nimport {Formik} from \"formik\";\r\nimport * as yup from 'yup';\r\nimport {NavLink, useParams} from \"react-router-dom\";\r\nimport {useHttp} from \"../hooks/http.hook\";\r\nimport {useMessage} from \"../hooks/message.hook\";\r\nimport {AuthContext} from \"../context/AuthContext\";\r\n\r\nimport jwt from 'jsonwebtoken';\r\n\r\nexport const ActivatePage = ({ match }) => {\r\n    const auth = useContext(AuthContext);\r\n    const message = useMessage();\r\n    const {error, request, clearError} = useHttp();\r\n\r\n    let token = useParams().token;\r\n    let { firstName } = jwt.decode(token);\r\n\r\n    useEffect( () => {\r\n        message(error);\r\n        clearError();\r\n    }, [error, message, clearError]);\r\n\r\n    const activateHandler = async () => {\r\n        try {\r\n            const data = await request(\r\n                '/api/auth/activation',\r\n                'POST',\r\n                {token});\r\n        } catch (e) {}\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <Formik\r\n                initialValues={{\r\n                    password: '',\r\n                    email: ''\r\n                }}\r\n                validateOnBlur\r\n            >\r\n                {({values, errors, touched, handleChange, handleBlur, isValid, handleSubmit, dirty}) => (\r\n                    <div className=\"row\">\r\n                        <div className=\"col s12 m6 offset-m3\">\r\n                            <div className=\"card\" style={{marginTop: 100}}>\r\n                                <div className=\"card-image\">\r\n                                    <img src={logo}/>\r\n                                    <span className=\"card-title\">\r\n                                <h3>Добро пожаловать, {firstName}</h3>\r\n                            </span>\r\n                                </div>\r\n                                <div className=\"card-content center-align\">\r\n                                    <button\r\n                                        className=\"btn red btn-large\"\r\n                                        onClick={activateHandler}\r\n                                        type='submit'>\r\n                                        Активируйте вашу учетную запись\r\n                                    </button>\r\n                                </div>\r\n                                <div className=\"card-action center-align\">\r\n                                    <button\r\n                                        className=\"btn white red-text text-accent-2 z-depth-0\">\r\n                                        <NavLink to=\"/\"\r\n                                                 className=\"red-text text-accent-2\">\r\n                                            Войти\r\n                                        </NavLink>\r\n                                    </button>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                )}\r\n            </Formik>\r\n        </div>\r\n    );\r\n};","C:\\Users\\Not\\WebstormProjects\\mern-project\\client\\src\\components\\Navbar.js",["80","81"],"C:\\Users\\Not\\WebstormProjects\\mern-project\\client\\src\\pages\\PersonalDataPage.js",["82","83","84","85"],{"ruleId":"86","severity":1,"message":"87","line":7,"column":9,"nodeType":"88","messageId":"89","endLine":7,"endColumn":15},{"ruleId":"90","replacedBy":"91"},{"ruleId":"92","replacedBy":"93"},{"ruleId":"86","severity":1,"message":"94","line":1,"column":39,"nodeType":"88","messageId":"89","endLine":1,"endColumn":47},{"ruleId":"95","severity":1,"message":"96","line":58,"column":37,"nodeType":"97","endLine":58,"endColumn":54},{"ruleId":"98","severity":1,"message":"99","line":91,"column":60,"nodeType":"100","messageId":"101","endLine":91,"endColumn":62},{"ruleId":"98","severity":1,"message":"99","line":91,"column":70,"nodeType":"100","messageId":"101","endLine":91,"endColumn":72},{"ruleId":"86","severity":1,"message":"102","line":4,"column":8,"nodeType":"88","messageId":"89","endLine":4,"endColumn":12},{"ruleId":"86","severity":1,"message":"103","line":12,"column":12,"nodeType":"88","messageId":"89","endLine":12,"endColumn":16},{"ruleId":"86","severity":1,"message":"104","line":12,"column":18,"nodeType":"88","messageId":"89","endLine":12,"endColumn":25},{"ruleId":"95","severity":1,"message":"96","line":77,"column":37,"nodeType":"97","endLine":77,"endColumn":54},{"ruleId":"98","severity":1,"message":"99","line":158,"column":60,"nodeType":"100","messageId":"101","endLine":158,"endColumn":62},{"ruleId":"98","severity":1,"message":"99","line":158,"column":70,"nodeType":"100","messageId":"101","endLine":158,"endColumn":72},{"ruleId":"86","severity":1,"message":"94","line":1,"column":39,"nodeType":"88","messageId":"89","endLine":1,"endColumn":47},{"ruleId":"86","severity":1,"message":"105","line":4,"column":13,"nodeType":"88","messageId":"89","endLine":4,"endColumn":16},{"ruleId":"86","severity":1,"message":"106","line":13,"column":11,"nodeType":"88","messageId":"89","endLine":13,"endColumn":15},{"ruleId":"86","severity":1,"message":"107","line":27,"column":19,"nodeType":"88","messageId":"89","endLine":27,"endColumn":23},{"ruleId":"95","severity":1,"message":"96","line":48,"column":37,"nodeType":"97","endLine":48,"endColumn":54},{"ruleId":"108","severity":1,"message":"109","line":24,"column":17,"nodeType":"97","endLine":24,"endColumn":51},{"ruleId":"108","severity":1,"message":"109","line":36,"column":17,"nodeType":"97","endLine":36,"endColumn":51},{"ruleId":"86","severity":1,"message":"110","line":3,"column":9,"nodeType":"88","messageId":"89","endLine":3,"endColumn":16},{"ruleId":"86","severity":1,"message":"102","line":5,"column":8,"nodeType":"88","messageId":"89","endLine":5,"endColumn":12},{"ruleId":"86","severity":1,"message":"111","line":21,"column":13,"nodeType":"88","messageId":"89","endLine":21,"endColumn":22},{"ruleId":"86","severity":1,"message":"112","line":24,"column":13,"nodeType":"88","messageId":"89","endLine":24,"endColumn":23},"no-unused-vars","'Navbar' is defined but never used.","Identifier","unusedVar","no-native-reassign",["113"],"no-negated-in-lhs",["114"],"'useState' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-mixed-operators","Unexpected mix of '&&' and '||'.","LogicalExpression","unexpectedMixedOperator","'logo' is defined but never used.","'form' is assigned a value but never used.","'setForm' is assigned a value but never used.","'yup' is defined but never used.","'auth' is assigned a value but never used.","'data' is assigned a value but never used.","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","'NavLink' is defined but never used.","'instances' is assigned a value but never used.","'instances2' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]